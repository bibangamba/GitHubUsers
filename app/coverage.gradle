task jacocoTestReport(type: JacocoReport, dependsOn: ['testMockDebugUnitTest', 'createMockDebugCoverageReport']) {
    description = 'Generate JaCoCo coverage report'
    group = 'Reporting'

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/BR.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      'android/**/*.*',
                      '**/com/levelup/bibangamba/githubusers/databinding',
                      '**/com/levelup/bibangamba/githubusers/generated/*',
                      '**/com/levelup/bibangamba/githubusers/DataBinderMapperImpl*',
                      '**/android/databinding/*',
                      '**/com/android/databinding/*',
                      '**/com/levelup/bibangamba/githubusers/util/Constants.*'
    ]
    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug/compileDebugJavaWithJavac/",
            excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testMockDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}

